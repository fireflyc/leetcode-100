import unittest
from leetcode.stella import Search


class SearchTestCase(unittest.TestCase):

    def test_max_area_of_island(self):
        self.assertEqual(6, Search.max_area_of_island([
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ]))
        self.assertEqual(2, Search.max_area_of_island([[1], [1]]))
        self.assertEqual(2500, Search.max_area_of_island([[1] * 50] * 50))

    def test_escape_a_large_maze(self):
        self.assertEqual(False, Search.escape_a_large_maze(blocked=[[0, 1], [1, 0]], source=[0, 0], target=[0, 2]))
        self.assertEqual(True, Search.escape_a_large_maze(blocked=[], source=[0, 0], target=[999999, 999999]))
        self.assertEqual(True, Search.escape_a_large_maze(
            blocked=[[691938, 300406], [710196, 624190], [858790, 609485], [268029, 225806], [200010, 188664],
                     [132599, 612099], [329444, 633495], [196657, 757958], [628509, 883388]],
            source=[655988, 180910], target=[267728, 840949]
        ))
        self.assertEqual(True, Search.escape_a_large_maze(
            blocked=[
                [859360, 747558], [767839, 414499], [957307, 53074], [680104, 950973], [777486, 371611],
                [74647, 814621], [400205, 636022], [480897, 491725], [599558, 635067], [604926, 321303],
                [146897, 874078], [69813, 369743], [240303, 869910], [297688, 930476], [819428, 899389],
                [528032, 699402], [442, 726800], [42886, 994090], [222527, 521523], [227403, 25583], [542274, 603306],
                [428336, 730145], [70511, 424498], [647514, 773345], [783807, 944686], [284767, 243365],
                [191104, 475620], [133935, 672361], [751876, 609273], [162090, 772994], [953887, 863427],
                [918711, 683947], [68517, 745792], [768592, 129889], [281213, 901250], [649332, 565904],
                [211498, 873161], [472298, 576437], [657648, 423014], [322155, 223386], [104451, 548963],
                [832668, 155145], [310940, 588911], [102891, 729651], [893369, 81819], [60100, 810221],
                [586906, 722845], [184989, 88941], [312646, 650448], [621355, 557009], [787268, 773811],
                [978155, 882776], [775843, 758630], [63834, 988711], [345650, 156464], [890173, 358341],
                [640840, 107643], [155546, 506015], [415037, 470166], [783677, 827973], [726709, 165867],
                [315711, 921062], [38804, 847785], [295889, 787820], [953842, 224828], [283946, 933122],
                [26535, 656712], [98331, 673090], [389065, 728072], [676328, 741858], [626345, 724074],
                [992313, 344431], [759811, 831836], [700408, 665625], [877522, 468336], [292117, 463603],
                [707459, 101239], [621145, 461629], [750776, 755457], [413855, 870990], [680497, 421583]
            ],
            source=[182699, 459911], target=[925304, 621233]
        ))
        self.assertEqual(True, Search.escape_a_large_maze(
            blocked=[[911403, 385527], [239959, 111299], [616794, 581419], [389409, 15658], [130782, 942945],
                     [776414, 292428], [192474, 535030], [437516, 709103], [620485, 873275], [402557, 436044],
                     [663467, 858356], [853911, 115092], [127916, 16601], [489938, 706537], [832380, 545560],
                     [20734, 182880], [348641, 238353], [66362, 828038], [460729, 741337], [545598, 153112],
                     [137201, 291704], [695378, 276425], [301902, 689387], [147989, 699840], [475048, 689442],
                     [549239, 98327], [957802, 316547], [179262, 286365], [122004, 691173], [44677, 888277],
                     [711929, 484566], [834937, 804469], [693569, 520854], [967578, 60328], [607848, 629914],
                     [97024, 25612], [633853, 167945], [20, 405493], [980580, 204610], [377234, 129064],
                     [451349, 851733], [880718, 313633], [639707, 842181], [228203, 220493], [113621, 408333],
                     [346405, 49105], [673336, 79383], [26185, 729729], [561163, 451782], [523320, 208617],
                     [774697, 966766], [541224, 421512], [704131, 580566], [131042, 175312], [458396, 869181],
                     [81157, 357928], [659723, 740626], [474434, 786986], [449916, 252667], [436318, 261093],
                     [503279, 313295], [843187, 619164], [936952, 66524], [312878, 316484]],
            source=[765971, 548106], target=[802301, 185762]
        ))
        self.assertEqual(True, Search.escape_a_large_maze(
            blocked=[[64114, 441013], [465931, 91664], [120527, 861395], [214632, 108292], [222947, 971427],
                     [366756, 798519], [315931, 683619], [425589, 726141], [155156, 896352], [521217, 217857],
                     [511393, 365120], [197926, 345728], [777736, 289721], [583093, 472844], [714566, 422359],
                     [356082, 722122], [589319, 179322], [238934, 227892], [896302, 965141], [397005, 901145],
                     [651667, 7345], [82233, 113624], [535616, 224615], [317549, 264104], [240948, 187690],
                     [791922, 89875], [641568, 146299], [991557, 843767], [494380, 703731], [75287, 257540],
                     [931763, 544828], [209036, 974912], [915394, 576024], [468605, 373958], [330973, 388057],
                     [567030, 5634], [971515, 179879], [541112, 919479], [578309, 40958], [616184, 114617],
                     [895515, 663469], [97950, 389939], [153743, 866327], [412807, 320675], [480807, 626486],
                     [642052, 276185], [909727, 343699], [210201, 702972], [600613, 389199], [839551, 472708],
                     [626588, 809182], [835042, 73473], [293081, 693959], [188387, 534803], [213929, 206117],
                     [219799, 769391], [861769, 859305], [813190, 492001], [196332, 492629], [12461, 214916],
                     [657145, 259458], [803196, 515468], [461323, 705499], [632089, 267964], [113007, 347168],
                     [300380, 903216], [346025, 699556], [763601, 971285], [649135, 194320], [586297, 58668],
                     [901356, 740126], [317896, 67595], [806015, 474334], [379560, 4827], [455161, 644212],
                     [412981, 730651], [507427, 921496], [907264, 851547], [403702, 910804], [479820, 370754],
                     [843936, 845642], [682900, 945673], [687046, 992620], [854339, 619070], [306556, 147138],
                     [249146, 305538], [226895, 67303], [88525, 934347], [364412, 624908], [503238, 5027],
                     [386742, 169268], [968929, 13671], [439012, 488182], [906255, 808392], [828704, 494463],
                     [732019, 725070], [28281, 71181], [173544, 85136], [319410, 868085], [634104, 526077]],
            source=[362662, 757270], target=[879297, 485661]
        ))
        self.assertEqual(True, Search.escape_a_large_maze(
            blocked=[[0, 3], [1, 0], [1, 1], [1, 2], [1, 3]],
            source=[0, 0], target=[0, 2]
        ))
        self.assertEqual(False, Search.escape_a_large_maze(
            blocked=[[10, 9], [9, 10], [10, 11], [11, 10]],
            source=[0, 0], target=[10, 10]
        ))
        self.assertEqual(False, Search.escape_a_large_maze(
            blocked=[[0, 199], [1, 198], [2, 197], [3, 196], [4, 195], [5, 194], [6, 193], [7, 192], [8, 191], [9, 190],
                     [10, 189], [11, 188], [12, 187], [13, 186], [14, 185], [15, 184], [16, 183], [17, 182], [18, 181],
                     [19, 180], [20, 179], [21, 178], [22, 177], [23, 176], [24, 175], [25, 174], [26, 173], [27, 172],
                     [28, 171], [29, 170], [30, 169], [31, 168], [32, 167], [33, 166], [34, 165], [35, 164], [36, 163],
                     [37, 162], [38, 161], [39, 160], [40, 159], [41, 158], [42, 157], [43, 156], [44, 155], [45, 154],
                     [46, 153], [47, 152], [48, 151], [49, 150], [50, 149], [51, 148], [52, 147], [53, 146], [54, 145],
                     [55, 144], [56, 143], [57, 142], [58, 141], [59, 140], [60, 139], [61, 138], [62, 137], [63, 136],
                     [64, 135], [65, 134], [66, 133], [67, 132], [68, 131], [69, 130], [70, 129], [71, 128], [72, 127],
                     [73, 126], [74, 125], [75, 124], [76, 123], [77, 122], [78, 121], [79, 120], [80, 119], [81, 118],
                     [82, 117], [83, 116], [84, 115], [85, 114], [86, 113], [87, 112], [88, 111], [89, 110], [90, 109],
                     [91, 108], [92, 107], [93, 106], [94, 105], [95, 104], [96, 103], [97, 102], [98, 101], [99, 100],
                     [100, 99], [101, 98], [102, 97], [103, 96], [104, 95], [105, 94], [106, 93], [107, 92], [108, 91],
                     [109, 90], [110, 89], [111, 88], [112, 87], [113, 86], [114, 85], [115, 84], [116, 83], [117, 82],
                     [118, 81], [119, 80], [120, 79], [121, 78], [122, 77], [123, 76], [124, 75], [125, 74], [126, 73],
                     [127, 72], [128, 71], [129, 70], [130, 69], [131, 68], [132, 67], [133, 66], [134, 65], [135, 64],
                     [136, 63], [137, 62], [138, 61], [139, 60], [140, 59], [141, 58], [142, 57], [143, 56], [144, 55],
                     [145, 54], [146, 53], [147, 52], [148, 51], [149, 50], [150, 49], [151, 48], [152, 47], [153, 46],
                     [154, 45], [155, 44], [156, 43], [157, 42], [158, 41], [159, 40], [160, 39], [161, 38], [162, 37],
                     [163, 36], [164, 35], [165, 34], [166, 33], [167, 32], [168, 31], [169, 30], [170, 29], [171, 28],
                     [172, 27], [173, 26], [174, 25], [175, 24], [176, 23], [177, 22], [178, 21], [179, 20], [180, 19],
                     [181, 18], [182, 17], [183, 16], [184, 15], [185, 14], [186, 13], [187, 12], [188, 11], [189, 10],
                     [190, 9], [191, 8], [192, 7], [193, 6], [194, 5], [195, 4], [196, 3], [197, 2], [198, 1],
                     [199, 0]],
            source=[0, 0], target=[200, 200]
        ))
        self.assertEqual(False, Search.escape_a_large_maze(
            blocked=[[0, 999991], [0, 999993], [0, 999996], [1, 999996], [1, 999997], [1, 999998], [1, 999999]],
            source=[0, 999997], target=[0, 2]
        ))

    def test_word_search(self):
        self.assertEqual(True, Search.word_search(
            board=[["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], word="ABCCED"
        ))
        self.assertEqual(True, Search.word_search(
            board=[["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], word="SEE"
        ))
        self.assertEqual(False, Search.word_search(
            board=[["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]], word="ABCB"
        ))
        self.assertEqual(True, Search.word_search(
            board=[["a", "b"], ["c", "d"]], word="cdba"
        ))

    def test_check_if_there_is_a_valid_path_in_a_grid(self):
        has_valid_path = Search.check_if_there_is_a_valid_path_in_a_grid
        self.assertEqual(True, has_valid_path(grid=[[2, 4, 3], [6, 5, 2]]))
        self.assertEqual(False, has_valid_path(grid=[[1, 2, 1], [1, 2, 1]]))
        self.assertEqual(False, has_valid_path(grid=[[1, 1, 2]]))
        self.assertEqual(True, has_valid_path(grid=[[1, 1, 1, 1, 1, 1, 3]]))
        self.assertEqual(True, has_valid_path(grid=[[2], [2], [2], [2], [2], [2], [6]]))
        self.assertEqual(True, has_valid_path(grid=[[4, 1], [6, 1]]))
        self.assertEqual(True, has_valid_path(grid=[[1, 1, 1, 1, 3], [1, 1, 1, 1, 2], [1, 1, 1, 1, 2], [1, 1, 1, 1, 2],
                                                    [1, 1, 1, 1, 2]]))

    def test_as_far_from_land_as_possible(self):
        self.assertEqual(2, Search.as_far_from_land_as_possible([[1, 0, 1], [0, 0, 0], [1, 0, 1]]))
        self.assertEqual(4, Search.as_far_from_land_as_possible([[1, 0, 0], [0, 0, 0], [0, 0, 0]]))
        self.assertEqual(-1,
                         Search.as_far_from_land_as_possible([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]))

    def test_generate_parentheses(self):
        self.assertEqual(set(["((()))", "(()())", "(())()", "()(())", "()()()"]), set(Search.generate_parentheses(3)))
        self.assertEqual(set(["()"]), set(Search.generate_parentheses(1)))

    def test_01_matrix(self):
        self.assertEqual([[0, 0, 0], [0, 1, 0], [0, 0, 0]], Search.zero_one_matrix([[0, 0, 0], [0, 1, 0], [0, 0, 0]]))
        self.assertEqual([[0, 0, 0], [0, 1, 0], [1, 2, 1]], Search.zero_one_matrix([[0, 0, 0], [0, 1, 0], [1, 1, 1]]))


